using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace SpellingChunkWPF
{
    /// <summary>
    /// Interaction logic for MainPage.xaml
    /// </summary>
    public partial class MainPage : Page
    {
        static readonly string[] Columns = new[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH" };
        static readonly Int16 ColumnWidth = 40;
        const int hiddennumber = 2;
        readonly int level;
        private static readonly Random getrandom = new Random();
        private static readonly object syncLock = new object();
        int[] values;
        public MainPage()
        {
            InitializeComponent();
            level = 1;
            txtHeader.Text = "Aplhabet - " + level.ToString();
            //populateHiddenColumn();
            //AddAlphabet();
        }

        public void AddTemplate()
        {

        }

        public void AddHeader()
        {

        }

        public void AddAlphabet()
        {
            for (int i = 1; i <= 26; i++)
            {
                TextBox tb = Common.GetTextBox();
                tb.Name = Common.IndexToColumn(i);
                tb.Width = ColumnWidth;
                if (ishidden(i) == false)
                {
                    tb.IsReadOnly = false;
                    tb.Text = "";
                    tb.Background = Brushes.CadetBlue;
                }
                else
                {
                    tb.IsReadOnly = true;
                    tb.Text = Common.IndexToColumn(i);
                }
                canvas1.Children.Add(tb);
            }

        }

        private void populateHiddenColumn()
        {
            int hiddencolumns = level * hiddennumber;
            values = new int[hiddencolumns];
            int newVal = 0;

            for (int i = 0; i < hiddencolumns; i++)
            {
                //bool isExists = false;
                //while (isExists == false)
                //{
                    newVal = Common.GetRandomNumber(1, 26);
                    //isExists = values.Contains(newVal);
                //}
                values[i] = newVal;
            }
        }

        private bool ishidden(int index)
        {
            return !values.Contains(index);
        }
    }
}
